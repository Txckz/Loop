pcall(function()
local UserInputService = game:GetService("UserInputService")
local Heartbeat = game:GetService("RunService").Heartbeat
local walkSpeed = 15
local plrs = game:GetService'Players'
local Heartbeat = game:GetService("RunService").Heartbeat
local plr = plrs.LocalPlayer
local mouse = plr:GetMouse()
local rep = game:GetService'ReplicatedStorage'
local uis = game:GetService'UserInputService'
local ts = game:GetService'TweenService'
local rs = game:GetService'RunService'

local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()

local function Notify(title,text,duration)
    game:GetService'StarterGui':SetCore('SendNotification',{
        Title = tostring(title),
        Text = tostring(text),
        Duration = tonumber(duration),
    })
end

local function GetChar()
    local Char = Player.Character or Player.CharacterAdded:Wait()
    return Char
end

spawn(function()
    while true do rs.RenderStepped:wait()
        pcall(function()
            if not uis:IsKeyDown(Enum.KeyCode.LeftShift) then
                plr.Character.Humanoid.WalkSpeed = walkSpeed
            elseif uis:IsKeyDown(Enum.KeyCode.LeftShift) then
                plr.Character.Humanoid.WalkSpeed = walkSpeed+14
            end
        end)
    end
end)

spawn(function()
    while true do rs.RenderStepped:wait()
        pcall(function()
            if not uis:IsKeyDown(Enum.KeyCode.E) then
                plr.Character.Humanoid.WalkSpeed = walkSpeed
            elseif uis:IsKeyDown(Enum.KeyCode.E) then
                plr.Character.Humanoid.WalkSpeed = walkSpeed+8
            end
        end)
    end
end)

local function AddCd(tool, Cd)
    local cd = Instance.new('IntValue', tool)
    cd.Name = 'ClientCD'
    game.Debris:AddItem(cd, Cd)
end

local function Shoot(firstPos, nextPos, Revolver)
    local TweenService = game:GetService("TweenService")
    local Debris = game:GetService("Debris")
    local RepStorage = game:GetService("ReplicatedStorage")

    if Revolver:FindFirstChild("Barrel") and Revolver.Barrel:FindFirstChild("Attachment") then
        local attachment = Revolver.Barrel.Attachment

        if attachment:FindFirstChild("Sound") then
            local soundClone = attachment.Sound:Clone()
            soundClone.Name = "Uncopy"
            soundClone.Parent = attachment
            soundClone:Play()
            Debris:AddItem(soundClone, 1)
        end

        -- Ignorar accesorios + Target Filter + jugador
        local filter = {Revolver.Parent, workspace:FindFirstChild("Target Filter")}
        for _, v in pairs(workspace:GetDescendants()) do
            if v:IsA("Accessory") then
                table.insert(filter, v)
            end
        end

        -- Raycast
        local direction = (nextPos - firstPos).Unit * 100
        local ray = Ray.new(firstPos, direction)
        local hitPart, hitPosition = workspace:FindPartOnRayWithIgnoreList(ray, filter)

        local bullet = RepStorage["Revolver Bullet"]:Clone()
        bullet.Parent = workspace:FindFirstChild("Target Filter") or workspace
        Debris:AddItem(bullet, 1)

        if hitPart then
            local distance = (firstPos - hitPosition).Magnitude
            bullet.Size = Vector3.new(0.2, 0.2, distance)
            bullet.CFrame = CFrame.new(firstPos, hitPosition) * CFrame.new(0, 0, -distance/2)

            TweenService:Create(bullet, TweenInfo.new(0.4, Enum.EasingStyle.Linear), {
                Size = Vector3.new(0.06, 0.06, distance),
                Transparency = 1
            }):Play()

            local exp = Instance.new("Part")
            exp.Anchored = true
            exp.CanCollide = false
            exp.Shape = "Ball"
            exp.Material = Enum.Material.Neon
            exp.BrickColor = bullet.BrickColor
            exp.Size = Vector3.new(0.1, 0.1, 0.1)
            exp.Position = hitPosition
            exp.Parent = workspace:FindFirstChild("Target Filter") or workspace
            Debris:AddItem(exp, 2)

            TweenService:Create(exp, TweenInfo.new(0.3, Enum.EasingStyle.Linear), {
                Size = Vector3.new(2, 2, 2),
                Transparency = 1
            }):Play()

            -- Daño
            if Revolver:FindFirstChild("DamageRemote") and hitPart.Parent:FindFirstChild("Humanoid") then
                Revolver.DamageRemote:FireServer(hitPart.Parent.Humanoid, hitPosition)
            end
        else
            local distance = (firstPos - (firstPos + direction)).Magnitude
            bullet.Size = Vector3.new(0.2, 0.2, distance)
            bullet.CFrame = CFrame.new(firstPos, firstPos + direction) * CFrame.new(0, 0, -distance/2)

            TweenService:Create(bullet, TweenInfo.new(0.4, Enum.EasingStyle.Linear), {
                Size = Vector3.new(0.06, 0.06, distance),
                Transparency = 1
            }):Play()
        end
    end
end

--Hitlock
local plr = game.Players.LocalPlayer
local rs = game:GetService("RunService")
local mouse = plr:GetMouse()

local tar = nil
local currentNeon = nil
local currentBillboard = nil
local updateConn = nil

local plr = game.Players.LocalPlayer
local mouse = plr:GetMouse()
local tar = nil

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local plr = Players.LocalPlayer
local mouse = plr:GetMouse()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local mouse = Players.LocalPlayer:GetMouse()

local debounceAutoQ = false
local autoQCooldown = 1.8
local autoQEnabled = true
local tar = nil
local lastManualAttack = 0

-- == IA (AUTO HIT "Q") ==
local followRange = 8
local equipRange = 8 -- 🔹 Distancia para autoequipar
local predictionTime = 0.15
local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local mouse = LocalPlayer:GetMouse()

local manualDesequip = false

local function hookAttackDetection(char)
    char.DescendantAdded:Connect(function(obj)
        if obj:IsA("AnimationTrack") and obj.Animation and obj.Animation.Name:lower() == "attack" then
            lastManualAttack = tick()
        end
    end)
end
if LocalPlayer.Character then hookAttackDetection(LocalPlayer.Character) end
LocalPlayer.CharacterAdded:Connect(hookAttackDetection)

local function hasToolEquipped(toolName)
    local char = LocalPlayer.Character
    if not char then return false end
    for _, tool in ipairs(char:GetChildren()) do
        if tool:IsA("Tool") and tool.Name == toolName then
            return true
        end
    end
    return false
end

local function equipTool(toolName)
    if manualDesequip and toolName == "Emerald Greatsword" then return end
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return end
    local tool = backpack:FindFirstChild(toolName)
    if tool then
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            hum:EquipTool(tool)
        end
    end
end

LocalPlayer.Character.ChildRemoved:Connect(function(obj)
    if obj:IsA("Tool") and obj.Name == "Emerald Greatsword" then
        manualDesequip = true
        task.delay(2, function()
            manualDesequip = false
        end)
    end
end)

-- Checks
local function isPlayerAlive(player)
    local char = player and player.Character
    local humanoid = char and char:FindFirstChildOfClass("Humanoid")
    return humanoid and humanoid.Health > 0
end

local function isPlayerValid(player)
    if not isPlayerAlive(player) then return false end
    local char = player.Character
    if not char then return false end
    if player ~= LocalPlayer and char:FindFirstChildOfClass("ForceField") then 
        return false 
    end
    
    -- Revisar cantidad de tools en el Backpack
    local backpack = player:FindFirstChildOfClass("Backpack")
    if not backpack then return false end
    
    local toolCount = 0
    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            toolCount += 1
        end
    end
    
    if toolCount <= 1 then
        return false
    end

    return true
end

local function isSwimming(char)
    local humanoid = char and char:FindFirstChildOfClass("Humanoid")
    return humanoid and humanoid:GetState() == Enum.HumanoidStateType.Swimming
end

local function isTargetVisible(targetPart)
    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
    raycastParams.IgnoreWater = true
    local result = workspace:Raycast(origin, direction, raycastParams)
    if result and result.Instance then
        local model = result.Instance:FindFirstAncestorOfClass("Model")
        if model and model:FindFirstChild("Humanoid") and model ~= LocalPlayer.Character then
            return true
        end
    end
    return false
end

local function getBladeRange()
    return 8.1
end

local function orientCharacterTo(targetPos)
    local myChar = LocalPlayer.Character
    if not myChar then return end
    local hrp = myChar:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local dir = (targetPos - hrp.Position).Unit
    hrp.CFrame = CFrame.new(hrp.Position, hrp.Position + Vector3.new(dir.X, 0, dir.Z))
end

local function predictTargetPosition(myHRP, targetHRP, basePrediction)
    if not myHRP or not targetHRP then return targetHRP.Position end

    local vel = targetHRP.AssemblyLinearVelocity
    local rel = (myHRP.Position - targetHRP.Position).Unit
    local speedTowardMe = vel:Dot(rel)

    local adjustedTime = basePrediction

    if speedTowardMe >= 40 then
        adjustedTime = 0
    elseif speedTowardMe >= 16 and speedTowardMe <= 25 then
        adjustedTime = math.max(0.03, basePrediction - 0.15)
    elseif speedTowardMe > 25 then
        adjustedTime = math.max(0.03, basePrediction - 0.10)
    elseif speedTowardMe > 8 then
        adjustedTime = basePrediction - 0.05
    end

    return targetHRP.Position + vel * adjustedTime
end

local function x(char)
    local humanoid = char and char:FindFirstChildOfClass("Humanoid")
    return humanoid and humanoid:GetState() == Enum.HumanoidStateType.Physics
end

local function autoQAction()
    if not hasToolEquipped("Emerald Greatsword") then return end
    if tick() - lastManualAttack < autoQCooldown then return end
    if debounceAutoQ or not tar or not LocalPlayer.Character then return end
    if not isPlayerValid(LocalPlayer) or not isPlayerValid(tar) then return end
    if x(LocalPlayer.Character) then return end

    local myHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    local targetHRP = tar.Character and tar.Character:FindFirstChild("HumanoidRootPart")
    if not myHRP or not targetHRP then return end

    local dist = (myHRP.Position - targetHRP.Position).Magnitude
    if dist > getBladeRange() then return end

    debounceAutoQ = true

    local predictedPos = predictTargetPosition(myHRP, targetHRP, predictionTime)
    orientCharacterTo(predictedPos)

    for _, v in LocalPlayer.Character:GetChildren() do
        if v:IsA("Tool") and v:FindFirstChild("DamageRemote") then
            if not isSwimming(LocalPlayer.Character) then
                local swingSound = v:FindFirstChild("Blade") and v.Blade:FindFirstChild("SwingSound")
                if swingSound then swingSound:Play() end

                local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid and v:FindFirstChild("Attack") then
                    humanoid:LoadAnimation(v.Attack):Play()
                end

                local vel = targetHRP.AssemblyLinearVelocity
                local rel = (myHRP.Position - targetHRP.Position).Unit
                local speedTowardMe = vel:Dot(rel)

                local impactDelay = 0.11
                if speedTowardMe > 25 then
                    impactDelay = 0.07
                elseif speedTowardMe > 8 then
                    impactDelay = 0.06
                end

                task.delay(impactDelay, function()
                    local hitSound = v:FindFirstChild("Blade") and v.Blade:FindFirstChild("HitSound")
                    if hitSound then hitSound:Play() end
                    local hum = tar.Character and tar.Character:FindFirstChildOfClass("Humanoid")
                    if hum then
                        v.DamageRemote:FireServer(hum)
                    end
                end)
            end
        end
    end

    task.delay(autoQCooldown, function()
        debounceAutoQ = false
    end)
end

local function followTargetIfClose()
    if not tar or not tar.Character then return end
    if not hasToolEquipped("Emerald Greatsword") then return end

    local hrp = tar.Character:FindFirstChild("HumanoidRootPart")
    local hum = tar.Character:FindFirstChildOfClass("Humanoid")
    if not hrp or not hum then return end

    local myChar = LocalPlayer.Character
    local myHRP = myChar and myChar:FindFirstChild("HumanoidRootPart")
    local myHum = myChar and myChar:FindFirstChildOfClass("Humanoid")
    if not myHRP or not myHum then return end

    -- 🚫 Bloquear si estoy muerto o en ragdoll
    if myHum.Health <= 0 then return end
    if myHum:GetState() == Enum.HumanoidStateType.Ragdoll then return end

    local dist = (myHRP.Position - hrp.Position).Magnitude
    if dist <= followRange and isTargetVisible(hrp) then
        -- 🔹 Orientación hacia el objetivo
        local lookDir = (hrp.Position - myHRP.Position).Unit
        local targetCF = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + lookDir)
        Camera.CFrame = Camera.CFrame:Lerp(targetCF, 0.10)

        -- 🔹 Salto y giro 360 si el target está más alto
        if hrp.Position.Y > myHRP.Position.Y + 2 then
            -- 🚫 No saltar si estoy en el aire
            if myHum:GetState() ~= Enum.HumanoidStateType.Freefall 
               and myHum:GetState() ~= Enum.HumanoidStateType.Jumping then
                myHum:ChangeState(Enum.HumanoidStateType.Jumping)

                -- Girar la cámara 360 grados rápido
                task.spawn(function()
                    local steps = 20 -- más pasos = más suave
                    for i = 1, steps do
                        Camera.CFrame = Camera.CFrame * CFrame.Angles(0, math.rad(360/steps), 0)
                        task.wait(0.01) -- velocidad del giro
                    end
                end)
            end
        end
    end
end


local equipCooldown = false
local function equipEmeraldGreatswordWithCooldown()
    if hasToolEquipped("Emerald Greatsword") then return end
    if equipCooldown then return end
    if not tar or not isPlayerValid(tar) then return end

    local myHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    local targetHRP = tar.Character and tar.Character:FindFirstChild("HumanoidRootPart")
    if not myHRP or not targetHRP then return end

    local dist = (myHRP.Position - targetHRP.Position).Magnitude
    if dist > 8.2 then return end

    equipCooldown = true
    equipTool("Emerald Greatsword")

    task.delay(0.3, function()
	equipTool("Kawaii Revolver")
    end)

    task.delay(2, function()
        equipCooldown = false
        if tar and isPlayerValid(tar) then
            local myHRP2 = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local targetHRP2 = tar.Character and tar.Character:FindFirstChild("HumanoidRootPart")
            if myHRP2 and targetHRP2 then
                local dist2 = (myHRP2.Position - targetHRP2.Position).Magnitude
                if dist2 <= 9 then
                    equipTool("Emerald Greatsword")
                end
            end
        end
    end)
end

RunService.Stepped:Connect(function()
    if autoQEnabled and tar and isPlayerValid(LocalPlayer) and isPlayerValid(tar) then
        local myHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local targetHRP = tar.Character and tar.Character:FindFirstChild("HumanoidRootPart")

        if myHRP and targetHRP then
            local dist = (myHRP.Position - targetHRP.Position).Magnitude

            if dist <= equipRange then
                equipEmeraldGreatswordWithCooldown()
            end
        end

        followTargetIfClose()
        autoQAction()
    end
end)

mouse.KeyDown:Connect(function(key)
    if key:lower() == "m" then
        autoQEnabled = not autoQEnabled
        warn("AutoQ " .. (autoQEnabled and "ACTIVADO" or "DESACTIVADO"))
    end
end)
-- == AQUI TERMINA POR PARTE DE LA IA ==

local function AddGlow(selectionBox)
	local glow = Instance.new("PointLight")
	glow.Name = "SelectionGlow"
	glow.Color = Color3.fromRGB(5,1,255)
	glow.Brightness = 7
	glow.Range = 6
	glow.Parent = selectionBox
end

local function CreateSelectionEffect(targetPart, player)
	if currentNeon then currentNeon:Destroy() currentNeon = nil end
	if currentBillboard then currentBillboard:Destroy() currentBillboard = nil end
	if updateConn then updateConn:Disconnect() updateConn = nil end

	local billboard = Instance.new("BillboardGui")
	billboard.Name = "SelectedPlayerGui"
	billboard.AlwaysOnTop = true
	billboard.Size = UDim2.new(1, 0, 1, 0)
	billboard.Adornee = targetPart
	billboard.Parent = targetPart
	currentBillboard = billboard

	local frame = Instance.new("Frame")
	frame.BackgroundTransparency = 0.75
	frame.Size = UDim2.new(0.9, 0, 0.9, 0)
	frame.BackgroundColor3 = Color3.fromRGB(5,1,255)
	frame.Parent = billboard

	-- Neon
	local neon = Instance.new("Part")
	neon.Name = "SelectedPlayer"
	neon.Anchored = true
	neon.CanCollide = false
	neon.Transparency = 1
	neon.Size = Vector3.new(0.5, 0.5, 0.5)
	neon.Position = targetPart.Position
	neon.CFrame = targetPart.CFrame
	neon.Material = Enum.Material.Neon
	neon.Color = Color3.fromRGB(5,1,255)
	AddGlow(neon)
	neon.Parent = workspace
	currentNeon = neon

	updateConn = rs.Heartbeat:Connect(function()
		if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			neon.Position = player.Character.HumanoidRootPart.Position
		else
			if currentNeon then currentNeon:Destroy() currentNeon = nil end
			if currentBillboard then currentBillboard:Destroy() currentBillboard = nil end
			if updateConn then updateConn:Disconnect() updateConn = nil end
		end
	end)
end

local function SelectPlayer(player)
	if player == plr then return end
	if player and player.Character and player.Character:FindFirstChild("Head") then
		CreateSelectionEffect(player.Character.Head, player)
		tar = player
	end
end

local function isWithinDistance(p1, p2, maxDist)
	if p1 and p1.Character and p2 and p2.Character then
		local hrp1 = p1.Character:FindFirstChild("HumanoidRootPart")
		local hrp2 = p2.Character:FindFirstChild("HumanoidRootPart")
		if hrp1 and hrp2 then
			return (hrp1.Position - hrp2.Position).Magnitude <= maxDist
		end
	end
	return false
end

function AddCd(tool, cdTime)
	local cd = Instance.new("BoolValue", tool)
	cd.Name = "ClientCD"
	game:GetService("Debris"):AddItem(cd, cdTime)
end

mouse.KeyDown:Connect(function(key)
	if key == 'r' then
		tar = nil
		local n_plr, dist
		for _, v in pairs(game.Players:GetPlayers()) do
			if v ~= plr and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
				local d = v:DistanceFromCharacter(plr.Character.HumanoidRootPart.Position)
				if not dist or d < dist then
					dist = d
					n_plr = v
				end
			end
		end
		if n_plr then SelectPlayer(n_plr) end

elseif key == 'q' then
    if tar and plr.Character then
        for _,v in next, plr.Character:GetDescendants() do
            -- 🔹 Solo se permite el manual Q si el AutoQ está apagado
            if not autoQEnabled then
                if v:IsA'Tool' and v.Name ~= 'Kawaii Revolver' and not v:FindFirstChild'ClientCD'
                and v:FindFirstChild'DamageRemote' and v:FindFirstChild'Cooldown'
                and tar and tar.Character and tar.Character:FindFirstChildOfClass'Humanoid' then

                    AddCd(v, v.Cooldown.Value)

                    if v:FindFirstChild'Attack' and plr.Character:FindFirstChildOfClass'Humanoid' then
                        plr.Character:FindFirstChildOfClass'Humanoid':LoadAnimation(v.Attack):Play()
                    end

                    if v:FindFirstChild('Blade') then
                        local swingSound = v.Blade:FindFirstChild('SwingSound')
                        local hitSound = v.Blade:FindFirstChild('HitSound')

                        if swingSound and swingSound:IsA('Sound') then
                            swingSound:Play()
                        end

                        local humanoidTarget = tar.Character:FindFirstChildOfClass('Humanoid')
                        if humanoidTarget then
                            wait(0.2)
                            v.DamageRemote:FireServer(humanoidTarget)

                            if hitSound and hitSound:IsA('Sound') and isWithinDistance(plr, tar, 20) then
                                hitSound:Play()
                            end
                        end
                    end
                end
            end

            -- 🔹 El Kawaii Revolver sí se permite siempre (aunque AutoQ esté activado)
            if v:IsA'Tool' and v.Name == 'Kawaii Revolver' and not v:FindFirstChild'ClientCD'
            and v:FindFirstChild'ReplicateRemote' and v:FindFirstChild'Barrel'
            and v.Barrel:FindFirstChild'Attachment' and tar and tar.Character and tar.Character:FindFirstChild'Head' then

                v.Parent = plr.Character
                AddCd(v,1.0)
                rs.Stepped:Wait()
                plr.Character:FindFirstChildOfClass'Humanoid':LoadAnimation(v.Fire):Play()

                Shoot(v.Barrel.Attachment.WorldPosition, tar.Character:WaitForChild("Torso").Position, v)
                v.ReplicateRemote:FireServer(tar.Character:WaitForChild("HumanoidRootPart").Position)

                local hitSound = v:FindFirstChild('HitSound')
                if hitSound and hitSound:IsA('Sound') and isWithinDistance(plr, tar, 20) then
                    hitSound:Play()
				end
			end
		end
	end
end
end)

mouse.Button1Down:Connect(function()
	local target = mouse.Target
	if target and target.Parent then
		local player = game.Players:GetPlayerFromCharacter(target.Parent)
		if player and player ~= plr then
			SelectPlayer(player)
		end
	end
end)

plr:GetMouse().KeyDown:Connect(function(key)
    if key == 'z' and tar and plr.Character then 
        for _,v in next,plr.Character:GetDescendants() do
            if v:IsA'Tool' and not v:FindFirstChild'ClientCD' and v:FindFirstChild'DamageRemote' and v:FindFirstChild'Cooldown' and tar and tar.Character and tar.Character:FindFirstChildOfClass'Humanoid' then
                AddCd(v,v.Cooldown.Value)
                local player = game.Players.LocalPlayer 
                Workspace[player.Name]:FindFirstChild(v.Name).Blade.HitSound:Play()
                rs.Stepped:Wait() --LOLLLL Fixed.
                v.DamageRemote:FireServer(tar.Character:FindFirstChildOfClass'Humanoid')          
            end
        end
    end
end)
--Triple Jump B
local M = game.Players.LocalPlayer:GetMouse()
local P = game.Players.LocalPlayer

local function A1()
    local c = P.Character
    if not c then return false end
    local h = c:FindFirstChildOfClass("Humanoid")
    if not h then return false end
    if h.PlatformStand then return true end
    if h:GetState() == Enum.HumanoidStateType.Physics then return true end
    return false
end

-- 🔹 Unequip seguro
local function I1(h)
    pcall(function() h:UnequipTools() end)
end

-- 🔹 Equip seguro
local function SafeEquip(h, tool)
    if h and tool and tool.Parent == P.Backpack then
        pcall(function()
            h:EquipTool(tool)
        end)
        task.wait(0.1)
    end
end

game:GetService("UserInputService").InputBegan:Connect(function(i, t)
    if t then return end
    if i.KeyCode == Enum.KeyCode.C then
        task.wait()
        local c = P.Character or P.CharacterAdded:Wait()
        local r = c:FindFirstChild("HumanoidRootPart")
        if not r then return end
        if A1() then return end  

        local J1 = false

        local function B1()
            local c = P.Character
            if c then
                for _, v in pairs(c:GetChildren()) do
                    if v:IsA("Tool") and v.Name ~= "C4" and v.Name ~= "Grenade" then
                        v.Parent = P.Backpack
                    end
                end
            end
        end

        local function C1()
            local c = P.Character
            local h = c and c:FindFirstChildOfClass("Humanoid")
            if h and not J1 then
                h:ChangeState(Enum.HumanoidStateType.Jumping)
                task.wait()
                B1()
                if A1() then return end  

                local function D1(n, pos)
                    local m = workspace:FindFirstChild(n)
                    if m and m:IsA("Model") then
                        for _, k in ipairs(m:GetChildren()) do
                            if k:IsA("BasePart") then
                                k.Position = pos
                            end
                        end
                    end
                end

                -- 🔹 Grenade
                for _, v in next, P.Backpack:GetChildren() do
                    if v.Name == "Grenade" and v:FindFirstChild("RemoteEvent") then
                        SafeEquip(h, v)
                        if A1() then return end  
                        h:ChangeState(Enum.HumanoidStateType.Freefall)
                        task.wait(0.1)
                        h:ChangeState(Enum.HumanoidStateType.Jumping)
                        local r = P.Character:FindFirstChild("HumanoidRootPart")
                        if r then
                            local gp = r.Position - Vector3.new(0.1, 1.8, 0.1)
                            
                        end
                        v:Activate()
                        I1(h)
                    end
                end

                task.wait(0.25)
                -- 🔹 C4
                for _, v in next, P.Backpack:GetChildren() do
                    if v.Name == "C4" and v:FindFirstChild("RemoteEvent") then
                        SafeEquip(h, v)
                        if A1() then return end  
                        local r = c:FindFirstChild("HumanoidRootPart")
                        if r then
                            local cp = r.Position - Vector3.new(0.1, 1.4, 0.1)
                            local function E1(m)
                                if m:IsA("Model") then
                                    for _, k in ipairs(m:GetChildren()) do
                                        if k:IsA("BasePart") then
                                            k.Position = cp
                                        end
                                    end
                                end
                            end
                            v.RemoteEvent:FireServer(M.Hit.LookVector)
                            E1(v)
                            h:ChangeState(Enum.HumanoidStateType.Jumping)
                        end
                        task.wait(0.1)
                        I1(h)
                    end
                end
                J1 = true
            end
        end

        C1()
    end
end)

-------------------------------------------------
-- 🔹 Segunda parte: 1 solo tool = doble salto
-------------------------------------------------
do
    local Pl = game:GetService("Players")
    local U  = game:GetService("UserInputService")
    local L  = Pl.LocalPlayer
    local m  = L:GetMouse()

    -- Prioridad de tools a usar con la tecla B
    local TOOL_ORDER = { "Grenade", "C4" }
    -- Si el tool usa RemoteEvent (C4 sí, Grenade no)
    local USE_REMOTE = { C4 = true, Grenade = false }

    local function getCharHum()
        local c = L.Character or L.CharacterAdded:Wait()
        return c, c:FindFirstChildOfClass("Humanoid")
    end

    local function grounded(h)
        return h and h.FloorMaterial ~= Enum.Material.Air
    end

    local function findTool(name)
        local t = L.Backpack:FindFirstChild(name)
        if t and t:IsA("Tool") then return t end
        local c = L.Character
        if c then
            local tt = c:FindFirstChild(name)
            if tt and tt:IsA("Tool") then return tt end
        end
        return nil
    end

    local function fireTool(t)
        if not t then return end
        local rv = t:FindFirstChild("RemoteEvent")
        if rv and USE_REMOTE[t.Name] then
            pcall(function() rv:FireServer(m.Hit.LookVector) end)
        else
            pcall(function() t:Activate() end)
        end
    end

    -- ⏱️ Timings ajustables para afinar el “pisón”
    local delays = {
        equip = 0.1, -- tras EquipTool
        afterFirstJump  = 0, -- espera tras el primer salto
        afterActivate   = 0.1, -- tras activar tool
        beforeSecondJump= 0, -- antes del segundo salto
    }

    -- 🦶 Doble salto “pisando” el tool sin tocar Parent
    local function singleToolDoubleJump(name)
        local c, h = getCharHum()
        if not h then return end
        if A1() then return end

        -- empezar limpio
        I1(h)
        local t = findTool(name)
        if not t then return end

        -- si estamos en suelo, hacemos el primer salto
        if grounded(h) then
            h:ChangeState(Enum.HumanoidStateType.Jumping)
            task.wait(delays.afterFirstJump)
        end

        -- equipar sin errores de Parent y activar el tool
        SafeEquip(h, t)
        task.wait(delays.equip)

        fireTool(t)
        task.wait(delays.afterActivate)

        -- forzamos una breve caída y luego el segundo salto
        h:ChangeState(Enum.HumanoidStateType.Freefall)
        task.wait(delays.beforeSecondJump)
        h:ChangeState(Enum.HumanoidStateType.Jumping)

        -- limpieza
        task.wait(0.02)
        I1(h)
    end

    U.InputBegan:Connect(function(input, gpe)
        if gpe then return end
        if input.KeyCode == Enum.KeyCode.B then
            for _, name in ipairs(TOOL_ORDER) do
                local t = findTool(name)
                if t then
                    singleToolDoubleJump(name)
                    break
                end
            end
        end
    end)
end

--Quick Gr2 glitch
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local player = Players.LocalPlayer
local DashSpeed = 118
local DashLength = 0.1 -- puse positivo para que no sea raro
local IsOn = false
local HoldingKey = false
local TrashTable = {}
local animationId = "rbxassetid://16985733241"
local animationTrack

-- 🔹 Deselect current tool
local function deselectCurrentTool()
	local character = player.Character
	if character and character:FindFirstChildOfClass("Tool") then
		local tool = character:FindFirstChildOfClass("Tool")
		tool.Parent = player.Backpack
	end
end

-- 🔹 Equip preferred tool (Grenade2 > ThrowingKnife)
local function equipPreferredTool()
	local backpack = player:FindFirstChild("Backpack")
	if not backpack then return nil end

	-- Prioridad: Grenade 2 primero
	local grenadeTool = backpack:FindFirstChild("Grenade 2")
	if grenadeTool then
		grenadeTool.Parent = player.Character
		return "Grenade 2"
	end

	-- Si no hay Grenade 2 pero sí Throwing Knife
	local knifeTool = backpack:FindFirstChild("Throwing Knife")
	if knifeTool then
		knifeTool.Parent = player.Character
		return "Throwing Knife"
	end

	return nil
end

-- 🔹 Animaciones
local function playAnimation()
	local character = player.Character
	if not character then return end

	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if humanoid then
		local animator = humanoid:FindFirstChildOfClass("Animator")
		if not animator then
			animator = Instance.new("Animator")
			animator.Parent = humanoid
		end

		local animation = Instance.new("Animation")
		animation.AnimationId = animationId
		animationTrack = animator:LoadAnimation(animation)
		animationTrack.Looped = true
		animationTrack:Play()
	end
end

local function stopAnimation()
	if animationTrack then
		animationTrack:Stop()
		animationTrack = nil
	end
end

-- 🔹 Spawn grenade visual
local function spawnGrenadeUnderFeet()
	local character = player.Character
	if not character then return end

	local rootPart = character:FindFirstChild("HumanoidRootPart")
	if not rootPart then return end

	local backpack = player:FindFirstChild("Backpack")
	if not backpack then return end

	local grenadeTool = backpack:FindFirstChild("Grenade 2")
	if grenadeTool then
		local fakeGrenade = grenadeTool:Clone()
		fakeGrenade.CanCollide = true
		fakeGrenade.Anchored = true
		fakeGrenade.Parent = workspace
		fakeGrenade.Position = rootPart.Position - Vector3.new(0, 3.7, 0)

		task.delay(1, function()
			if fakeGrenade then
				fakeGrenade:Destroy()
			end
		end)
	end
end

-- 🔹 Dash principal
local function executeDash()
	if IsOn then return end
	IsOn = true

	local character = player.Character
	if not character then return end

-- 🚨 Si tiene Emerald Greatsword → desequipar Throwing Knife y parar dash
local tool = character:FindFirstChildOfClass("Tool")
if tool and tool.Name == "Emerald Greatsword" then
	-- desequipar Throwing Knife si está en uso
	local knife = character:FindFirstChild("Throwing Knife")
	if knife then
		knife.Parent = player.Backpack
		task.wait(0.1)
		knife.Parent = player.Backpack
		task.wait(0.1)
		knife.Parent = player.Backpack
	end

	-- detener dash al instante
	HoldingKey = false
	IsOn = false

	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
	if humanoidRootPart then
		for _, inst in pairs(humanoidRootPart:GetChildren()) do
			if inst:IsA("BodyVelocity") then
				inst:Destroy()
			end
		end
	end

	stopAnimation()
	return -- salir de la función para no seguir el dash
end

	deselectCurrentTool()
	local toolUsed = equipPreferredTool()
	if not toolUsed then IsOn = false return end

	-- Solo spawnear granada si es Grenade 2
	if toolUsed == "Grenade 2" then
		spawnGrenadeUnderFeet()
	end

	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
	local humanoid = character:FindFirstChildOfClass("Humanoid")

	if humanoidRootPart and humanoid then
		while HoldingKey do
		    		-- 🚨 Si equipa "Emerald Greatsword" mientras está en uso → parar todo
		local currentTool = character:FindFirstChildOfClass("Tool")
		if currentTool and currentTool.Name == "Emerald Greatsword" then
			HoldingKey = false
			IsOn = false

			-- destruir cualquier BodyVelocity activo en HumanoidRootPart
			if humanoidRootPart then
				for _, inst in pairs(humanoidRootPart:GetChildren()) do
					if inst:IsA("BodyVelocity") then
						inst:Destroy()
					end
				end
			end

			-- parar animación si aplica
			stopAnimation()

			break
		end
			-- ✅ Animación solo en aire si es Grenade 2
			if toolUsed == "Grenade 2" then
				if humanoid.FloorMaterial == Enum.Material.Air then
					if not animationTrack then
						playAnimation()
					end
				else
					if animationTrack then
						stopAnimation()
					end
				end
			end

			-- 🔹 Diferente comportamiento según herramienta
			local dashVelocity

			if toolUsed == "Grenade 2" then
				-- 🔹 Simula "intentar usar" antes del dash real
				game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
				task.wait(0.6) -- tiempo de intento

				-- 🔹 Salta un poco antes del dash
				humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				task.wait(0.15)

				dashVelocity = humanoidRootPart.CFrame.RightVector * DashSpeed + Vector3.new(0, 13, 0)
elseif toolUsed == "Throwing Knife" then
	-- Guardar la gravedad actual
	local workspace = game:GetService("Workspace")
	local originalGravity = workspace.Gravity

	-- 🔹 Doble salto antes del tirón
	local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	if humanoid then
		local originalJumpPower = humanoid.JumpPower
		humanoid.JumpPower = originalJumpPower * 2 -- salto doble
		humanoid:ChangeState(Enum.HumanoidStateType.Jumping)

		-- restaurar JumpPower normal después del salto
		task.delay(0.2, function()
			if humanoid then
				humanoid.JumpPower = originalJumpPower
			end
		end)
	end

	task.wait(0.03) -- un pequeño delay para que suba antes del dash

	-- 🔹 Poner gravedad fuerte
	workspace.Gravity = 198 * 2 -- doble de la normal

	-- Tirón lateral
	game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
	task.wait(0.01)

	local lookCFrame = humanoidRootPart.CFrame
	local rightDir = lookCFrame.RightVector

	local bodyVelocity = Instance.new("BodyVelocity")
	bodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)

	-- Movimiento lateral + gravedad extra hacia abajo
	bodyVelocity.Velocity = (rightDir * (DashSpeed * 4)) + Vector3.new(0, -99999, 0)

	bodyVelocity.Parent = humanoidRootPart
	game:GetService("Debris"):AddItem(bodyVelocity, 0.03)

	-- Mucha velocidad pero sin rebote
	dashVelocity = rightDir * (DashSpeed * 12)

	-- Restaurar gravedad al terminar el tirón
	task.delay(0.03, function()
		workspace.Gravity = originalGravity
	end)
end

			-- Empuje
			local bodyVelocity = Instance.new("BodyVelocity")
			bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
			bodyVelocity.Velocity = dashVelocity
			bodyVelocity.Parent = humanoidRootPart
			TrashTable[character] = bodyVelocity

			task.wait(DashLength)

			bodyVelocity:Destroy()
			TrashTable[character] = nil
		end
	end

	stopAnimation()
	IsOn = false
end

-- ⌨️ INPUTS
UIS.InputBegan:Connect(function(input, isTyping)
	if isTyping then return end
	if input.KeyCode == Enum.KeyCode.T then
		local backpack = player:FindFirstChild("Backpack")
		local character = player.Character
	-- 🚨 Si tiene Emerald Greatsword equipado → desequipar antes de seguir
	if character then
		local tool = character:FindFirstChildOfClass("Tool")
		if tool and tool.Name == "Emerald Greatsword" then
			tool.Parent = backpack
		end
	end

		local hasGrenade = (backpack and backpack:FindFirstChild("Grenade 2")) or (character and character:FindFirstChild("Grenade 2"))
		local hasKnife = (backpack and backpack:FindFirstChild("Throwing Knife")) or (character and character:FindFirstChild("Throwing Knife"))

		-- ✅ ahora sí: si tienes Grenade o Knife → funciona
		if not hasGrenade and not hasKnife then
			return
		end

		HoldingKey = true
		executeDash()

	elseif input.KeyCode == Enum.KeyCode.G then
		DashSpeed = math.max(0, DashSpeed - 15)

	elseif input.KeyCode == Enum.KeyCode.H then
		DashSpeed = DashSpeed + 15
	end
end)

UIS.InputEnded:Connect(function(input, isTyping)
	if isTyping then return end
	if input.KeyCode == Enum.KeyCode.T then
		HoldingKey = false
		IsOn = false
		wait(1)
		stopAnimation()

		local character = player.Character
		if character then
			local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
			if humanoidRootPart then
				for _, instance in pairs(humanoidRootPart:GetChildren()) do
					if instance:IsA("BodyVelocity") then
						instance:Destroy()
					end
				end
			end
		end
	end
end)
-- Quick/Manual Void
    local Mouse = game.Players.LocalPlayer:GetMouse()
    game:GetService("UserInputService").InputBegan:Connect(function(Input, IsTyping)
        if IsTyping then return end
        if Input.KeyCode == Enum.KeyCode.P then
 game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Three, false, game)
local bool = true


if bool then
    game.Workspace.FallenPartsDestroyHeight = 0 / 0
else
    game.Workspace.FallenPartsDestroyHeight = -600
end
 game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Three, false, game)

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-989882289898989, -989879899822988, -98999898922899898)
 game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Three, false, game)

wait(0.1)

game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health = 0
 game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Three, false, game)
 game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Three, false, game)
 game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Three, false, game)		 
   end
 end)
--End

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local isActive = false

local function onCharacterAdded()
    if isActive then
        task.wait(0.3) -- Esperar 0.3 segundos antes de ejecutar la función
        local PlayerGui = Player:FindFirstChild("PlayerGui")
        if PlayerGui then
            local MenuScreen = PlayerGui:FindFirstChild("Menu Screen")
            if MenuScreen then
                MenuScreen.Enabled = false
                MenuScreen.RemoteEvent:FireServer("Emerald Greatsword")
            end
        end
    end
end

-- Detectar cuando el personaje reaparece
Player.CharacterAdded:Connect(onCharacterAdded)

UserInputService.InputBegan:Connect(function(Input, IsTyping)
    if IsTyping then return end
    if Input.KeyCode == Enum.KeyCode.KeypadSeven then
        isActive = not isActive  -- Alternar estado (activado/desactivado)
        
        if isActive then
            onCharacterAdded()  -- Ejecutar si el personaje ya está activo
        end
    end
end)


local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local isActive = false

local function onCharacterAdded()
    if isActive then
        task.wait(0.4) -- Esperar 0.3 segundos antes de ejecutar la función
        local PlayerGui = Player:FindFirstChild("PlayerGui")
        if PlayerGui then
            local MenuScreen = PlayerGui:FindFirstChild("Menu Screen")
            if MenuScreen then
                MenuScreen.Enabled = false
                MenuScreen.RemoteEvent:FireServer("Blood Dagger")
            end
        end
    end
end

-- Detectar cuando el personaje reaparece
Player.CharacterAdded:Connect(onCharacterAdded)

UserInputService.InputBegan:Connect(function(Input, IsTyping)
    if IsTyping then return end
    if Input.KeyCode == Enum.KeyCode.KeypadEight then
        isActive = not isActive  -- Alternar estado (activado/desactivado)
        
        if isActive then
            onCharacterAdded()  -- Ejecutar si el personaje ya está activo
        end
    end
end)


local Mouse = game.Players.LocalPlayer:GetMouse()
game:GetService("UserInputService").InputBegan:Connect(function(Input, IsTyping)
if IsTyping then return end
if Input.KeyCode == Enum.KeyCode.F1 then
local player = game.Players.LocalPlayer  -- Obtener el jugador local
local humanoid = game.Workspace[player.Name].Humanoid  -- Obtener el Humanoid del jugador local
humanoid.Health = 0 
end
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local lp = Players.LocalPlayer
local bladeName = "Blade"
local toolName = "Emerald Greatsword"
local attackInProgress = false
local clickedThisAttack = false
local deIay = 1.5
local recentHits = {}
local soundCooldown = 1.8
local lastSoundTimes = {}
local bladeConnection = nil -- conexión global para poder desconectarla

local function getchar(plr, yield)
	plr = plr or lp
	return plr.Character or (yield and plr.CharacterAdded:Wait())
end

local function gethumanoid(plr, yield)
	plr = plr or lp
	local char = getchar(plr, yield)
	return char and (yield and char:WaitForChild("Humanoid") or char:FindFirstChildWhichIsA("Humanoid"))
end

local function clearRecentHits()
	local now = os.clock()
	for key, timestamp in pairs(recentHits) do
		if now - timestamp > deIay then
			recentHits[key] = nil
		end
	end
end

local function playUniqueSoundOnce(sound)
	if sound and sound:IsA("Sound") and not sound.IsPlaying then
		sound:Play()
	end
end

-- Función principal que activa la detección de golpes solo durante ataque válido
local function activateBladeDetection(tool)
	local blade = tool:FindFirstChild(bladeName)
	local damageRemote = tool:FindFirstChild("DamageRemote")
	if not (blade and blade:IsA("BasePart") and damageRemote) then return end

	-- Limpia conexión previa si hay
	if bladeConnection then
		bladeConnection:Disconnect()
		bladeConnection = nil
	end

	-- Conecta solo si el ataque fue activado por clic
	bladeConnection = blade.Touched:Connect(function(hit)
		if not attackInProgress or not clickedThisAttack then return end

		local hitCharacter = hit:FindFirstAncestorWhichIsA("Model")
		local hitPlayer = hitCharacter and Players:GetPlayerFromCharacter(hitCharacter)

		if hitPlayer and hitPlayer ~= lp then
			local humanoid = gethumanoid(hitPlayer)
			local hitKey = tostring(hitPlayer.UserId)

			if humanoid and humanoid.Health > 0 and not recentHits[hitKey] then
				recentHits[hitKey] = os.clock()

				pcall(function()
					damageRemote:FireServer(humanoid)
				end)

				local now = os.clock()
				local lastTime = lastSoundTimes[hitKey] or 0
				if now - lastTime >= soundCooldown then
					local hitSound = blade:FindFirstChild("HitSound")
					playUniqueSoundOnce(hitSound)
					lastSoundTimes[hitKey] = now
				end
			end
		end
	end)

	-- Desconectar después del delay
	task.delay(deIay, function()
		if bladeConnection then
			bladeConnection:Disconnect()
			bladeConnection = nil
		end
	end)
end

local function waitForBladeInBackpack()
	while true do
		local tool = lp.Backpack:FindFirstChild(toolName)
		if tool then return tool end
		task.wait(0.5)
	end
end

local function checkEquippedTool()
	local char = getchar(lp, true)
	local equippedTool = char:FindFirstChildOfClass("Tool")
	return equippedTool and equippedTool.Name == toolName
end

-- ✅ Evento de clic real del jugador
lp:GetMouse().Button1Down:Connect(function()
	if attackInProgress then return end
	if not checkEquippedTool() then return end

	attackInProgress = true
	clickedThisAttack = true
	table.clear(recentHits)
	table.clear(lastSoundTimes)

	local char = getchar(lp, true)
	local tool = char and char:FindFirstChild(toolName) or waitForBladeInBackpack()
	if tool then
		activateBladeDetection(tool)
	end

	-- Reset después del delay
	task.delay(deIay, function()
		wait(0.3)
		attackInProgress = false
		clickedThisAttack = false
		table.clear(recentHits)
		table.clear(lastSoundTimes)

		if bladeConnection then
			bladeConnection:Disconnect()
			bladeConnection = nil
		end
	end)
end)

RunService.Stepped:Connect(clearRecentHits)
		
wait()
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local animator = Humanoid:WaitForChild("Animator")

local enabled = true
local toolEquipped = false
local originalJumpPower = Humanoid.JumpPower
local sitAnim = Instance.new("Animation")
sitAnim.AnimationId = "rbxassetid://16745557001"
local animTrack
local extraSitUntil = 0

-- Función para actualizar referencias y reconectar eventos al respawn
local function onCharacterAdded(char)
    Character = char
    Humanoid = char:WaitForChild("Humanoid")
    animator = Humanoid:WaitForChild("Animator")
    originalJumpPower = Humanoid.JumpPower
    animTrack = nil
    toolEquipped = false
    extraSitUntil = 0

    -- Reconectar eventos de herramientas
    char.ChildAdded:Connect(function(child)
        if child:IsA("Tool") and child.Name == "Emerald Greatsword" then
            toolEquipped = true
        end
    end)

    char.ChildRemoved:Connect(function(child)
        if child:IsA("Tool") and child.Name == "Emerald Greatsword" then
            toolEquipped = false
            if animTrack then animTrack:Stop() end
            Humanoid.JumpPower = originalJumpPower
        end
    end)

    -- Reconectar evento de salto
    Humanoid.Jumping:Connect(function(isActive)
        if isActive and enabled and toolEquipped and Humanoid.JumpPower >= 145 then
            extraSitUntil = tick() + 2
        end
    end)
end

LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

onCharacterAdded(Character)

UserInputService.InputBegan:Connect(function(input, typing)
    if typing then return end
    if input.KeyCode == Enum.KeyCode.J then
        enabled = not enabled
        if not enabled then
            if animTrack then animTrack:Stop() end
            Humanoid.JumpPower = originalJumpPower
        end
    elseif input.KeyCode == Enum.KeyCode.LeftShift or input.KeyCode == Enum.KeyCode.RightShift then
        extraSitUntil = 0
        if animTrack then
            animTrack:Stop()
            animTrack = nil
        end
        Humanoid.JumpPower = originalJumpPower
    end
end)

-- Loop principal
task.spawn(function()
    while task.wait(0.2) do
        if enabled and toolEquipped then
            local state = Humanoid:GetState()

            if state == Enum.HumanoidStateType.Swimming then
                Humanoid.JumpPower = math.random(175, 185)

                if not animTrack or not animTrack.IsPlaying then
                    animTrack = animator:LoadAnimation(sitAnim)
                    animTrack:Play()
                    animTrack.Looped = true
                end
            elseif state == Enum.HumanoidStateType.Running or state == Enum.HumanoidStateType.Landed then
                extraSitUntil = 0
                if animTrack then
                    animTrack:Stop()
                    animTrack = nil
                end
                Humanoid.JumpPower = originalJumpPower
            elseif tick() < extraSitUntil then
                if not animTrack or not animTrack.IsPlaying then
                    animTrack = animator:LoadAnimation(sitAnim)
                    animTrack:Play()
                    animTrack.Looped = true
                end
            else
                if animTrack then
                    animTrack:Stop()
                    animTrack = nil
                end
                Humanoid.JumpPower = originalJumpPower
            end
        else
            if animTrack then
                animTrack:Stop()
                animTrack = nil
            end
            Humanoid.JumpPower = originalJumpPower
        end
    end
end)
end)

